
"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { createPortal } from "react-dom"
import { Send, X, Bot } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import axios from "axios"

interface Message {
    role: "user" | "bot"
    content: string
}

export default function ChatBox() {
    const [isOpen, setIsOpen] = useState(false)
    const [input, setInput] = useState("")
    const [messages, setMessages] = useState<Message[]>([])
    const [isLoading, setIsLoading] = useState(false)
    const [canSubmit, setCanSubmit] = useState(true)
    const [hasBeenOpened, setHasBeenOpened] = useState(false)
    const [currentMessageIndex, setCurrentMessageIndex] = useState(0)
    const [messageCycleCount, setMessageCycleCount] = useState(0) // ƒê·∫øm s·ªë l·∫ßn chuy·ªÉn ƒë·ªïi th√¥ng b√°o
    const [showMessages, setShowMessages] = useState(true) // ƒêi·ªÅu khi·ªÉn hi·ªÉn th·ªã th√¥ng b√°o
    const messagesEndRef = useRef<HTMLDivElement>(null)

    // Danh s√°ch c√°c th√¥ng b√°o
    const messagesList = [
        hasBeenOpened ? "Xin ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p l·∫°i! üëã" : "Xin ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üëã",
        "B·∫°n c·∫ßn c√¢u h·ªèi g√¨ c·ª© li√™n h·ªá cho m√¨nh! üòä",
        "M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√¥ng ngh·ªá! üíª",
        "H√£y h·ªèi v·ªÅ c√°c d·ª± √°n c·ªßa m√¨nh nh√©! üöÄ",
        "B·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ k·ªπ nƒÉng c·ªßa m√¨nh kh√¥ng? üåü",
        "B·∫°n ƒëang quan t√¢m ƒë·∫øn lƒ©nh v·ª±c n√†o v·∫≠y? ü§î",
        "ƒê·ª´ng ng·∫°i ng√πng, m√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n! ü§ó",
        "B·∫°n c√≥ mu·ªën xem CV c·ªßa m√¨nh kh√¥ng? üìù",
        "M√¨nh c√≤n c√≥ nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã ƒë·ªÉ chia s·∫ª ƒë·∫•y! üéØ",
        "B·∫°n c√≥ c√¢u h·ªèi v·ªÅ kinh nghi·ªám l√†m vi·ªác c·ªßa m√¨nh kh√¥ng? üíº",
        "C·ª© tho·∫£i m√°i ƒë·∫∑t c√¢u h·ªèi cho m√¨nh nh√©! üì©",
        "M√¨nh s·∫Ω h·ªó tr·ª£ b·∫°n b·∫•t c·ª© l√∫c n√†o b·∫°n c·∫ßn nh√©. üòä T·∫°m bi·ªát b·∫°n!",
    ];

    // Scroll to bottom of messages
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }, [messages])

    // Send welcome message with suggested questions when chat is opened
    useEffect(() => {
        if (isOpen && messages.length === 0) {
            setMessages([
                {
                    role: "bot",
                    content: `üëã Xin ch√†o, t√¥i l√† Nguy·ªÖn Sao ‚Äì r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n!  
B·∫°n c·∫ßn bi·∫øt g√¨ t·ª´ t√¥i? D∆∞·ªõi ƒë√¢y l√† m·ªôt v√†i g·ª£i √Ω b·∫°n c√≥ th·ªÉ h·ªèi:  
- üìå [B·∫°n l√† ai?]  
- üìû [Th√¥ng tin li√™n h·ªá c·ªßa b·∫°n?]  
- üíº [K·ªπ nƒÉng c·ªßa b·∫°n l√† g√¨?]  
- üöÄ [B·∫°n ƒë√£ l√†m nh·ªØng d·ª± √°n n√†o?]

H√£y ch·ªçn m·ªôt c√¢u h·ªèi ho·∫∑c nh·∫≠p b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën h·ªèi nh√©!`,
                },
            ])
        }
    }, [isOpen, messages.length])

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i hasBeenOpened khi chat ƒë∆∞·ª£c m·ªü
    useEffect(() => {
        if (isOpen) {
            setHasBeenOpened(true)
        }
    }, [isOpen])

    // T·∫°o v√≤ng l·∫∑p ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa c√°c th√¥ng b√°o
    useEffect(() => {
        if (!isOpen && showMessages) {
            const interval = setInterval(() => {
                setCurrentMessageIndex((prev) => {
                    const nextIndex = (prev + 1) % messagesList.length
                    setMessageCycleCount((count) => count + 1)
                    return nextIndex
                })
            }, 10000)

            return () => {
                clearInterval(interval)
            }
        } else {
            setCurrentMessageIndex(0)
        }
    }, [isOpen, showMessages, messagesList.length])

    const handleSubmit = async (e: React.FormEvent, question?: string) => {
        e.preventDefault()
        const userMessage = question || input.trim()
        if (!userMessage) return

        setMessages((prev) => [...prev, { role: "user", content: userMessage }])
        setInput("")
        setIsLoading(true)
        setCanSubmit(false)
        setTimeout(() => setCanSubmit(true), 2000)

        try {
            const normalizedMessage = userMessage.toLowerCase().replace(/\s+/g, " ").trim()
            let response = ""

            if (normalizedMessage.includes("b·∫°n l√† ai") || normalizedMessage.includes("gi·ªõi thi·ªáu b·∫£n th√¢n")) {
                response = `
T√¥i l√† Nguy·ªÖn Sao, sinh ng√†y 29/06/2004, hi·ªán l√† sinh vi√™n c√¥ng ngh·ªá th√¥ng tin. 
T√¥i ƒëam m√™ ph√°t tri·ªÉn ph·∫ßn m·ªÅm, ƒë·ªãnh h∆∞·ªõng tr·ªü th√†nh Java Backend Developer. 
K·ªπ nƒÉng: Java, Spring Boot, RESTful APIs, MySQL, SQL Server, Kafka, Redis, React Native. 
M·ª•c ti√™u: Tr·ªü th√†nh th·ª±c t·∫≠p sinh Java v√† l√†m vi·ªác to√†n th·ªùi gian, ti·∫øp t·ª•c h·ªçc ƒë·∫°i h·ªçc.
                `.trim()
            } else if (normalizedMessage.includes("li√™n h·ªá") || normalizedMessage.includes("contact")) {
                response = `
Th√¥ng tin li√™n h·ªá c·ªßa t√¥i:  
- S·ªë ƒëi·ªán tho·∫°i: 0392445255  
- Email: nguyensaovn2019@gmail.com  
- ƒê·ªãa ch·ªâ: Linh Trung, Th·ªß ƒê·ª©c  
- Website: https://nguyensao.id.vn
                `.trim()
            } else if (normalizedMessage.includes("k·ªπ nƒÉng") || normalizedMessage.includes("skills")) {
                response = `
K·ªπ nƒÉng c·ªßa t√¥i:  
- Ng√¥n ng·ªØ: Java  
- ·ª®ng d·ª•ng di ƒë·ªông: React Native v·ªõi Expo  
- Backend: Spring Boot (RESTful APIs, MVC), Spring Security, WebSocket, RabbitMQ  
- C∆° s·ªü d·ªØ li·ªáu: MySQL, SQL Server  
- DevOps: Docker  
- C√¥ng c·ª•: Github, Postman  
- K·ªπ nƒÉng m·ªÅm: T·ª± h·ªçc, l√†m vi·ªác nh√≥m, ham h·ªçc h·ªèi
                `.trim()
            } else if (normalizedMessage.includes("d·ª± √°n") || normalizedMessage.includes("project")) {
                response = `
D·ª± √°n c·ªßa t√¥i:  
1. **Ecommerce Microservices (3/2025 - 5/2025)**  
   - Vai tr√≤: Backend  
   - C√¥ng ngh·ªá: Java 17, Spring Boot, Kafka, RabbitMQ, Redis, OAuth2, MySQL, Docker  
   - Github: https://github.com/NgSao/ecommerce_microservices  

2. **E-Commerce App (3/2025 - 6/2025)**  
   - Vai tr√≤: FullStack  
   - C√¥ng ngh·ªá: Java 17, Spring Boot, React Native, Kafka, Redis, OAuth2, MySQL, Docker  
   - Github: https://github.com/NgSao/ecommerce-layered-architecture, https://github.com/NgSao/ecommer-app-reactnativ
                `.trim()
            } else {
                const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "YOUR_API_KEY"
                const context = ""
                const res = await axios.post(
                    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
                    { contents: [{ parts: [{ text: `${context}\nC√¢u h·ªèi: ${userMessage}` }] }] },
                    { headers: { "Content-Type": "application/json" } }
                )
                response = res.data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi."
            }

            setMessages((prev) => [...prev, { role: "bot", content: response }])
        } catch (error) {
            console.error("L·ªói:", error)
            setMessages((prev) => [...prev, { role: "bot", content: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau." }])
        } finally {
            setIsLoading(false)
        }
    }

    const handleSuggestedQuestion = (question: string) => {
        const mockEvent = { preventDefault: () => { } } as React.FormEvent
        setInput(question)
        handleSubmit(mockEvent, question)
    }

    return (
        <>
            {/* Chat button with welcome messages */}
            <div className="fixed bottom-4 right-4 z-50 md:bottom-6 md:right-6">
                {/* Hi·ªÉn th·ªã th√¥ng b√°o hi·ªán t·∫°i d·ª±a tr√™n currentMessageIndex */}
                {!isOpen && showMessages && (
                    <div className="absolute bottom-14 right-0 mb-2 w-48 sm:w-56 bg-zinc-900 text-white text-xs sm:text-sm rounded-lg p-2 sm:p-3 shadow-lg border border-zinc-800 animate-fade-in">
                        <p>{messagesList[currentMessageIndex]}</p>
                        <div className="absolute -bottom-2 right-4 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-zinc-900"></div>
                    </div>
                )}

                {/* N√∫t chat */}
                <button
                    onClick={() => setIsOpen(true)}
                    className="relative w-14 h-14 rounded-full bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 text-white flex items-center justify-center shadow-lg hover:shadow-[0_0_15px_5px_rgba(255,165,0,0.5)] hover:scale-110 transition-all duration-300 animate-pulse-slow"
                    aria-label="M·ªü h·ªôp chat"
                >
                    <div className="absolute w-full h-full rounded-full bg-orange-400 animate-ping opacity-20"></div>
                    <Bot className="w-7 h-7 relative z-10 hover:animate-spin-slow" />
                </button>
            </div>

            {/* Chat box - rendered using portal */}
            {isOpen &&
                typeof document !== "undefined" &&
                createPortal(
                    <div className="fixed bottom-4 right-2 w-[calc(100%-1rem)] max-w-[360px] h-[70vh] max-h-[500px] bg-zinc-900 border border-zinc-800 rounded-xl shadow-2xl flex flex-col z-50 sm:bottom-6 sm:right-4 sm:w-80 sm:max-w-[400px] sm:h-[80vh] sm:max-h-[600px]">
                        {/* Chat header */}
                        <div className="flex items-center justify-between p-3 sm:p-4 border-b border-zinc-800 bg-zinc-900 rounded-t-xl">
                            <div className="flex items-center gap-2 sm:gap-3">
                                <Avatar className="h-8 w-8 sm:h-10 sm:w-10">
                                    <AvatarImage src="/avatar.png?height=40&width=40" alt="AI Assistant" />
                                    <AvatarFallback>NS</AvatarFallback>
                                </Avatar>
                                <div>
                                    <h3 className="font-semibold text-white text-sm sm:text-lg">Nguy·ªÖn Sao</h3>
                                    <p className="text-xs text-zinc-400">AI Assistant</p>
                                </div>
                            </div>
                            <Button
                                variant="ghost"
                                size="icon"
                                className="h-7 w-7 sm:h-8 sm:w-8 rounded-full text-zinc-400 hover:text-white hover:bg-zinc-800"
                                onClick={() => setIsOpen(false)}
                                aria-label="ƒê√≥ng h·ªôp chat"
                            >
                                <X className="h-4 w-4 sm:h-5 sm:w-5" />
                            </Button>
                        </div>

                        {/* Chat messages */}
                        <div className="flex-1 overflow-y-auto p-2 sm:p-4 space-y-2 sm:space-y-4 scrollbar-thin scrollbar-thumb-zinc-700 scrollbar-track-zinc-900">
                            {messages.map((message, index) => (
                                <div key={index} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                                    <div
                                        className={`max-w-[90%] sm:max-w-[90%] rounded-lg p-2 sm:p-3 text-sm leading-relaxed ${message.role === "user" ? "bg-yellow-500 text-white" : "bg-zinc-800 text-zinc-100"
                                            } break-words`}
                                    >
                                        <p className="whitespace-pre-wrap">
                                            {message.content.split('\n').map((line, i) => {
                                                const match = line.match(/\[(.+?)\]/)
                                                if (match) {
                                                    const question = match[1]
                                                    return (
                                                        <button
                                                            key={i}
                                                            type="button"
                                                            onClick={() => handleSuggestedQuestion(question)}
                                                            className="text-yellow-400 hover:text-yellow-300 underline mx-0.5 sm:mx-1"
                                                            aria-label={`H·ªèi: ${question}`}
                                                        >
                                                            {`[${question}]`}
                                                        </button>
                                                    )
                                                }
                                                return (
                                                    <span key={i}>
                                                        {line}
                                                        <br />
                                                    </span>
                                                )
                                            })}
                                        </p>
                                    </div>
                                </div>
                            ))}
                            {isLoading && (
                                <div className="flex justify-start">
                                    <div className="max-w-[85%] sm:max-w-[80%] rounded-lg p-2 sm:p-3 bg-zinc-800 text-zinc-100 flex items-center">
                                        <span className="animate-pulse text-sm">ƒêang x·ª≠ l√Ω...</span>
                                    </div>
                                </div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>

                        {/* Chat input */}
                        <div className="p-2 sm:p-4 border-t border-zinc-800 bg-zinc-900">
                            <form onSubmit={handleSubmit} className="space-y-2 sm:space-y-3">
                                <div className="flex gap-1 sm:gap-2">
                                    <Textarea
                                        value={input}
                                        onChange={(e) => setInput(e.target.value)}
                                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                                        className="min-h-8 sm:min-h-10 resize-none bg-zinc-800 border-zinc-700 text-white placeholder-zinc-400 focus:ring-yellow-500 focus:border-yellow-500 text-sm sm:text-base"
                                        onKeyDown={(e) => {
                                            if (e.key === "Enter" && !e.shiftKey) {
                                                e.preventDefault()
                                                handleSubmit(e)
                                            }
                                        }}
                                        aria-label="Nh·∫≠p tin nh·∫Øn"
                                    />
                                    <Button
                                        type="submit"
                                        size="icon"
                                        disabled={isLoading || !input.trim() || !canSubmit}
                                        className="h-8 sm:h-10 w-8 sm:w-10 rounded-full bg-yellow-500 hover:bg-yellow-600 disabled:bg-yellow-700"
                                        aria-label="G·ª≠i tin nh·∫Øn"
                                    >
                                        <Send className="h-3 w-3 sm:h-4 sm:w-4" />
                                    </Button>
                                </div>
                            </form>
                        </div>
                    </div>,
                    document.body
                )}
        </>
    )
}